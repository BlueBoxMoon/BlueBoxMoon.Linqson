trigger:
- master
- develop

name: 'Auto Build'

variables:
  BuildConfiguration: 'release'
  PackProjects: '**/*.csproj;!**/*.Tests.csproj'

pool:
  vmImage: 'windows-2019'

steps:
- task: GitVersion@5
  displayName: GitVersion
  inputs:
    preferBundledVersion: false

- task: NuGetToolInstaller@1
  displayName: 'Use NuGet'

- task: NuGetCommand@2
  displayName: 'NuGet restore'

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration) /p:Version=$(GitVersion.NuGetVersion)'
    versioningScheme: byBuildNumber

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test
    projects: '**/*.Tests.csproj'
    arguments: '/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)\TestResults\Coverage\coverage.cobertura.xml'

- task: DotNetCoreCLI@2
  displayName: 'dotnet reportgenerator'
  inputs:
    command: custom
    projects: '**/*.Tests.csproj'
    custom: reportgenerator
    arguments: '"-reports:$(Build.SourcesDirectory)\TestResults\Coverage\coverage.cobertura*.xml" -reporttypes:Cobertura "-targetdir:$(Build.SourcesDirectory)\TestResults\Coverage"'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)\TestResults\Coverage\Cobertura.xml'

- task: DotNetCoreCLI@2
  displayName: 'dotnet pack'
  inputs:
    command: 'pack'
    packagesToPack: '$(PackProjects)'
    nobuild: true
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'GitVersion.NuGetVersion'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'